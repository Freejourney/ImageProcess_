%% Load and Inicialize image 
clear all;
clc;
img = imread('7.bmp');  
img = rgb2gray(img);
bw = im2bw(img, 0.26);
bw = not(bw);
figure;
imshow(bw);

%% Filter image and Get edges
gaussianFilter = fspecial('gaussian',20, 10);
img_filted = imfilter(img, gaussianFilter,'symmetric');% Filted Image
filted_edges = edge(img_filted, 'Canny'); % Edges found in filted image

%% Find Circles (Use hough transform for circles)
[centers, radii] = find_circles(filted_edges, [45,70]);
hough_circles_draw(img, centers, radii);

%% Find Fittest Circle
[max_c_x, max_c_y, rad] = find_fittest_circle(centers, radii, bw);
hough_circles_draw(img, [max_c_x, max_c_y], rad);

%% Crop Objective Image
Pic = crop_objective_image(img, max_c_x, max_c_y, rad, 1, 0.26, 60);
figure;
imshow(Pic);

BW = edge(Pic,'canny');
imshow(BW);
[H,T,R] = hough(BW,'RhoResolution',0.5,'ThetaResolution',0.5);
figure;
imshow(imadjust(mat2gray(H)),'XData',T,'YData',R,...
   'InitialMagnification','fit');
title('Limited Theta Range Hough Transform of Gantrycrane Image');
xlabel('\theta'), ylabel('\rho');
axis on, axis normal;
colormap(hot)
% 显示霍夫变换矩阵中的极值点
P = houghpeaks(H,10,'threshold',ceil(0.3*max(H(:)))); % 从霍夫变换矩阵H中提取50个极值点
x = T(P(:,2));%极值点的theta值，即P的第二列存放的是极值点的theta值
y = R(P(:,1));%极值点的rho值，即P的第二列存放的是极值点的rho值
hold on;plot(x,y,'s','color','black');
% 找原图中的直线
lines = houghlines(BW,T,R,P,'FillGap',24,'MinLength',8);

% 绘制提取得到的直线
figure, imshow(Pic), hold on
max_len = 0;
xy_long = [0 0; 0 0];
xy_second_long = [0 0; 0 0];
second_len = 0;
xy = [0, 0; 0
for k = 1:length(lines)
    % 绘制第k条"竖着的"直线
    y_ = lines(k).point2(2)-lines(k).point1(2);
    x_ = lines(k).point2(1)-lines(k).point1(1);
    if (y_/x_) > 0
        xy = cat(xy, [lines(k).point1; lines(k).point2]);
        plot(xy(:,1),xy(:,2),'LineWidth',2,'Color','green');

        % 绘制第k条直线的起点（黄色）、终点（红色）
        plot(xy(1,1),xy(1,2),'x','LineWidth',2,'Color','yellow');
        plot(xy(2,1),xy(2,2),'x','LineWidth',2,'Color','red');

        % 计算第k条直线的长度，保留最长直线的端点
        len = norm(lines(k).point1 - lines(k).point2);
        if ( len > max_len)
            max_len = len;
            xy_long = xy;
        end
        if (len > second_len && len < max_len)
           second_len = len;
           xy_second_long = xy;
        end
    end
end
title('提取到的直线');

xy_long = [xy(:,1); xy(:,2)];
xy_second_long = [xy(:,3); xy(:,4)];

point1 = [(xy_long(1,1)+xy_long(2,1))/2; (xy_long(1,2)+xy_long(2,2))/2];
point2 = [(xy_second_long(1,1)+xy_second_long(2,1))/2; (xy_second_long(1,2)+xy_second_long(2,2))/2];

point = (point1+point2)/2

% 以红色线高亮显示最长的线
plot(xy_long(:,1),xy_long(:,2),'LineWidth',2,'Color','red');
% plot((xy_long(1,1)+xy_long(2,1))/2+2,(xy_long(1,2)+xy_long(2,2))/2-1, 'o', 'Color', 'red');
plot(point(1), point(2), 'o', 'Color', 'red');
% plot((xy_long(1,1)+xy_long(2,1))/2+2,(xy_long(1,2)+xy_long(2,2))/2-1, 'o', 'Color', 'red');

plot(xy_second_long(:,1),xy_second_long(:,2),'LineWidth',2,'Color','red');

%% Calculate Rectangle
[S,s] = calcu_rect_FOV(Pic, img)

